# Generated by Django 5.0.1 on 2025-08-06 14:01

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("guidelines", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "session_id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, unique=True),
                ),
                (
                    "age_group",
                    models.CharField(
                        choices=[
                            ("0-2", "Infant (0-2 years)"),
                            ("3-5", "Preschool (3-5 years)"),
                            ("6-12", "School age (6-12 years)"),
                            ("13-17", "Adolescent (13-17 years)"),
                            ("18-30", "Young adult (18-30 years)"),
                            ("31-50", "Adult (31-50 years)"),
                            ("51-65", "Middle-aged (51-65 years)"),
                            ("65+", "Senior (65+ years)"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "location_country",
                    models.CharField(help_text="Country of residence", max_length=100),
                ),
                (
                    "caries_risk",
                    models.CharField(
                        choices=[
                            ("low", "Low risk"),
                            ("moderate", "Moderate risk"),
                            ("high", "High risk"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "periodontal_status",
                    models.CharField(
                        choices=[
                            ("healthy", "Healthy gums"),
                            ("gingivitis", "Gingivitis"),
                            ("periodontitis", "Periodontitis"),
                            ("unknown", "Unknown/Not assessed"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "fluoride_exposure",
                    models.CharField(
                        choices=[
                            ("none", "No fluoride exposure"),
                            ("water", "Fluoridated water only"),
                            ("toothpaste", "Fluoride toothpaste only"),
                            ("both", "Both water and toothpaste"),
                            ("supplements", "Fluoride supplements"),
                            ("professional", "Professional fluoride treatments"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "has_orthodontics",
                    models.BooleanField(
                        default=False, help_text="Currently wearing braces or aligners"
                    ),
                ),
                ("has_dental_implants", models.BooleanField(default=False)),
                ("has_diabetes", models.BooleanField(default=False)),
                ("is_pregnant", models.BooleanField(default=False)),
                ("has_dry_mouth", models.BooleanField(default=False)),
                (
                    "brushing_frequency",
                    models.CharField(
                        blank=True,
                        help_text="e.g., 'twice daily', 'once daily'",
                        max_length=50,
                    ),
                ),
                (
                    "flossing_frequency",
                    models.CharField(
                        blank=True,
                        help_text="e.g., 'daily', 'weekly', 'rarely'",
                        max_length=50,
                    ),
                ),
                (
                    "diet_sugar_intake",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("low", "Low sugar diet"),
                            ("moderate", "Moderate sugar intake"),
                            ("high", "High sugar diet"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "specific_concerns",
                    models.TextField(
                        blank=True,
                        help_text="Any specific oral health concerns or symptoms",
                    ),
                ),
                (
                    "medications",
                    models.TextField(
                        blank=True,
                        help_text="Current medications that might affect oral health",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["session_id"], name="ai_recommen_session_d00820_idx"
                    ),
                    models.Index(
                        fields=["age_group"], name="ai_recommen_age_gro_769e08_idx"
                    ),
                    models.Index(
                        fields=["caries_risk"], name="ai_recommen_caries__a5b641_idx"
                    ),
                    models.Index(
                        fields=["-created_at"], name="ai_recommen_created_c5e59b_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="AIRecommendationSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "gemini_analysis",
                    models.TextField(blank=True, help_text="AI analysis from Gemini"),
                ),
                (
                    "personalized_advice",
                    models.TextField(
                        blank=True, help_text="Personalized advice generated by AI"
                    ),
                ),
                (
                    "priority_actions",
                    models.JSONField(
                        default=list,
                        help_text="List of priority actions recommended by AI",
                    ),
                ),
                (
                    "risk_assessment",
                    models.TextField(blank=True, help_text="AI risk assessment"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("error", "Error"),
                        ],
                        default="processing",
                        max_length=20,
                    ),
                ),
                (
                    "processing_time",
                    models.FloatField(
                        blank=True, help_text="Processing time in seconds", null=True
                    ),
                ),
                ("error_message", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "matched_recommendations",
                    models.ManyToManyField(
                        related_name="ai_sessions", to="guidelines.recommendation"
                    ),
                ),
                (
                    "user_profile",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_session",
                        to="ai_recommendations.userprofile",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="RecommendationMatch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "relevance_score",
                    models.FloatField(help_text="Relevance score (0-1)"),
                ),
                (
                    "match_reasoning",
                    models.TextField(
                        help_text="Why this recommendation matches the user profile"
                    ),
                ),
                (
                    "priority_level",
                    models.CharField(
                        choices=[
                            ("critical", "Critical"),
                            ("high", "High Priority"),
                            ("medium", "Medium Priority"),
                            ("low", "Low Priority"),
                        ],
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "ai_session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="matches",
                        to="ai_recommendations.airecommendationsession",
                    ),
                ),
                (
                    "recommendation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="guidelines.recommendation",
                    ),
                ),
            ],
            options={
                "ordering": ["-relevance_score", "-created_at"],
                "indexes": [
                    models.Index(
                        fields=["relevance_score"],
                        name="ai_recommen_relevan_8ff3eb_idx",
                    ),
                    models.Index(
                        fields=["priority_level"], name="ai_recommen_priorit_d1ab77_idx"
                    ),
                ],
                "unique_together": {("ai_session", "recommendation")},
            },
        ),
        migrations.AddIndex(
            model_name="airecommendationsession",
            index=models.Index(fields=["status"], name="ai_recommen_status_be0e42_idx"),
        ),
        migrations.AddIndex(
            model_name="airecommendationsession",
            index=models.Index(
                fields=["-created_at"], name="ai_recommen_created_fdd033_idx"
            ),
        ),
    ]
