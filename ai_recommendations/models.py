"""
Models for AI-powered personalized recommendations.
"""

from django.db import models
from django.urls import reverse
from guidelines.models import Recommendation
import uuid


class UserProfile(models.Model):
    """User profile for personalized recommendations."""
    
    # Age categories
    AGE_CHOICES = [
        ('0-2', 'Infant (0-2 years)'),
        ('3-5', 'Preschool (3-5 years)'),
        ('6-12', 'School age (6-12 years)'),
        ('13-17', 'Adolescent (13-17 years)'),
        ('18-30', 'Young adult (18-30 years)'),
        ('31-50', 'Adult (31-50 years)'),
        ('51-65', 'Middle-aged (51-65 years)'),
        ('65+', 'Senior (65+ years)'),
    ]
    
    # Risk factors
    CARIES_RISK_CHOICES = [
        ('low', 'Low risk'),
        ('moderate', 'Moderate risk'),
        ('high', 'High risk'),
    ]
    
    PERIODONTAL_RISK_CHOICES = [
        ('healthy', 'Healthy gums'),
        ('gingivitis', 'Gingivitis'),
        ('periodontitis', 'Periodontitis'),
        ('unknown', 'Unknown/Not assessed'),
    ]
    
    FLUORIDE_EXPOSURE_CHOICES = [
        ('none', 'No fluoride exposure'),
        ('water', 'Fluoridated water only'),
        ('toothpaste', 'Fluoride toothpaste only'),
        ('both', 'Both water and toothpaste'),
        ('supplements', 'Fluoride supplements'),
        ('professional', 'Professional fluoride treatments'),
    ]
    
    # Basic information
    session_id = models.UUIDField(default=uuid.uuid4, unique=True, db_index=True)
    age_group = models.CharField(max_length=10, choices=AGE_CHOICES)
    location_country = models.CharField(max_length=100, help_text="Country of residence")
    
    # Oral health status
    caries_risk = models.CharField(max_length=20, choices=CARIES_RISK_CHOICES)
    periodontal_status = models.CharField(max_length=20, choices=PERIODONTAL_RISK_CHOICES)
    fluoride_exposure = models.CharField(max_length=20, choices=FLUORIDE_EXPOSURE_CHOICES)
    
    # Specific conditions
    has_orthodontics = models.BooleanField(default=False, help_text="Currently wearing braces or aligners")
    has_dental_implants = models.BooleanField(default=False)
    has_diabetes = models.BooleanField(default=False)
    is_pregnant = models.BooleanField(default=False)
    has_dry_mouth = models.BooleanField(default=False)
    
    # Behavioral factors
    brushing_frequency = models.CharField(max_length=50, blank=True, help_text="e.g., 'twice daily', 'once daily'")
    flossing_frequency = models.CharField(max_length=50, blank=True, help_text="e.g., 'daily', 'weekly', 'rarely'")
    diet_sugar_intake = models.CharField(max_length=20, choices=[
        ('low', 'Low sugar diet'),
        ('moderate', 'Moderate sugar intake'),
        ('high', 'High sugar diet'),
    ], blank=True)
    
    # Additional information
    specific_concerns = models.TextField(blank=True, help_text="Any specific oral health concerns or symptoms")
    medications = models.TextField(blank=True, help_text="Current medications that might affect oral health")
    
    # Metadata
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['session_id']),
            models.Index(fields=['age_group']),
            models.Index(fields=['caries_risk']),
            models.Index(fields=['-created_at']),
        ]
    
    def __str__(self):
        return f"Profile {self.session_id} - {self.age_group}, {self.location_country}"
    
    def get_absolute_url(self):
        return reverse('ai_recommendations:results', kwargs={'session_id': self.session_id})


class AIRecommendationSession(models.Model):
    """AI analysis session for a user profile."""
    
    STATUS_CHOICES = [
        ('processing', 'Processing'),
        ('completed', 'Completed'),
        ('error', 'Error'),
    ]
    
    user_profile = models.OneToOneField(UserProfile, on_delete=models.CASCADE, related_name='ai_session')
    matched_recommendations = models.ManyToManyField(Recommendation, related_name='ai_sessions')
    
    # AI Analysis
    gemini_analysis = models.TextField(blank=True, help_text="AI analysis from Gemini")
    personalized_advice = models.TextField(blank=True, help_text="Personalized advice generated by AI")
    priority_actions = models.JSONField(default=list, help_text="List of priority actions recommended by AI")
    risk_assessment = models.TextField(blank=True, help_text="AI risk assessment")
    
    # Session metadata
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='processing')
    processing_time = models.FloatField(null=True, blank=True, help_text="Processing time in seconds")
    error_message = models.TextField(blank=True)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['status']),
            models.Index(fields=['-created_at']),
        ]
    
    def __str__(self):
        return f"AI Session for {self.user_profile.session_id} - {self.status}"
    
    @property
    def recommendations_count(self):
        return self.matched_recommendations.count()


class RecommendationMatch(models.Model):
    """Stores the matching score and reasoning for each recommendation."""
    
    ai_session = models.ForeignKey(AIRecommendationSession, on_delete=models.CASCADE, related_name='matches')
    recommendation = models.ForeignKey(Recommendation, on_delete=models.CASCADE)
    
    relevance_score = models.FloatField(help_text="Relevance score (0-1)")
    match_reasoning = models.TextField(help_text="Why this recommendation matches the user profile")
    priority_level = models.CharField(max_length=20, choices=[
        ('critical', 'Critical'),
        ('high', 'High Priority'),
        ('medium', 'Medium Priority'),
        ('low', 'Low Priority'),
    ])
    
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['-relevance_score', '-created_at']
        unique_together = ['ai_session', 'recommendation']
        indexes = [
            models.Index(fields=['relevance_score']),
            models.Index(fields=['priority_level']),
        ]
    
    def __str__(self):
        return f"Match {self.relevance_score:.2f} - {self.recommendation.title[:50]}"